<?php
//this is the frame container for master_shifts.php and people.php.
//In other words, it provides the main interface for workshift
//assignment.  Because of the frames and extensive javascript, it's
//prone to breakage, but often it's hard to debug and fix.  To
//complicate matters, master_shifts.php has an auxilary javascript
//file.  This file acts as a go-between for master_shifts and people,
//and does a lot of the work for people, as a matter of fact.  people
//keeps a houselist on the side, which has the number of hours
//assigned so far, and is a sortable, clickable list.

//the idea here is that as things happen in master_shifts, functions
//here get called.  The main one is offer_options, which will go
//through everyone in the people list and display them appropriately,
//depending on their compatibility with the shift.  To that end there
//are a number of other functions, all called by offer_options.

//the Logout button usually printed here will be suppressed because
//this is a framed document.
$body_insert = '';
require_once('default.inc.php');
//I forget why this doctype is here.  Possibly just to be anal, but
//possibly also because frames get tricky.
?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"
   "http://www.w3.org/TR/html4/frameset.dtd">
<HTML>
<HEAD>
<TITLE>Assign Workshifts</TITLE>
<script type="text/javascript">
//this variable has the displayed entry for every member, or it will
//later on in the page once it's initialized.  This allows us to hide,
//bold, etc.  member names without doing getElementById every time.
var list = new Array();
<?php
$houselist = get_houselist();
//output associative array with house members as keys
js_assoc_array('listhouse',array_flip($houselist));
//the manager can call this page with warnings (generated by
//master_shifts) suppressed, initially or forever.  This javascript
//takes care of that -- master_shifts looks for it before warnings
if (array_key_exists('suppress_all',$_REQUEST)) {
  echo "var suppress_all = true;\nvar suppress_first = true;\n";
}
else if (array_key_exists('suppress_first',$_REQUEST)) {
  echo "var suppress_first = true;\nvar suppress_all = false;\n";
}
else {
  echo "var suppress_first = false;\nvar suppress_all = false;\n";
}
//this could go in people.  It's a conversion array from ratings (how
//much someone wants a shift) to colors.  Colors go from gray (don't
//want) to green (want).
?>
var rating_color = new Array();
<?php
//of course, we need to know the maximum possible rating.
$max_rating = get_static('wanted_max_rating',5);
$default_rating = get_static('default_rating',2);
$min_wanted_rating = max(get_static('min_wanted_rating',max($max_rating-1,1)),1);

echo "var max_rating = " . $max_rating . ";\n";
//the minimum wanted rating is the least rating such that a person is
//considered to "want" the shift.  People who want shifts are bolded.
echo "var min_wanted_rating = " . $min_wanted_rating . ";\n";

$want_scale_factor = $max_rating-$min_wanted_rating+2;
$unwant_scale_factor = max($min_wanted_rating-1,1);
//do the colors
for ($ii = 0; $ii <= $max_rating; $ii++) {
  echo "rating_color[$ii] = '";
  if ($ii>= $min_wanted_rating) {
    //some proportion of 255, depending on how much above minimum ii is
    $temp = dechex(ceil(255*
                        ($ii-$min_wanted_rating+1)/$want_scale_factor));
    //put out that number (in hex) padded so it's in the middle
    echo str_pad($temp . '00',6,'0',STR_PAD_LEFT);
  }
  else if ($ii < $min_wanted_rating) {
    //gray comes from all the colors being the same
    //if the default rating is 0, just make it black -- there's no
    //such thing as not wanting a shift if the default is 0
    if (!$default_rating) {
      $temp = '00';
    }
    else {
      //192 is pretty gray -- the closer to 255, the lighter we get
      $temp = dechex(floor(192*(1-($ii/$unwant_scale_factor))));
    }
    //pad out to length 2
    if (strlen($temp) == 1) {
      $temp = "0$temp";
    }
    echo "$temp$temp$temp";
  }
  echo "';\n";
}
?>

//return the html element of the member, so we can do stuff with it
function get_person(member) {
  //is this a real member with a real div element in people?  Since
  //the user can enter nonexistent people in fields, we can't be sure.
  if (member && member != self.master_shifts.dummy_string && 
      (listhouse[member] || listhouse[member] == 0)) {
    return list[listhouse[member]];
  }
  else {
    return false;
  }
}

//return the style element of the member element
function get_style(member) {
  var ret = get_person(member);
  if (ret) {
    return ret.style;
  }
  else {
    return false;
  }
}

//display the person as not being able to do a shift.  Note that
//someone may *want* a shift (signified by color and size, normally),
//but not be able to do it (signified by strike-through and size),
//which overrides.  The color will be left, though.
function cant_do_person(member,styleflag) {
  var st;
  if (arguments.length > 1) {
    st = member;
  }
  else {
    st = get_style(member);
  }
  if (st) {
    st.textDecoration = 'line-through';
    st.fontSize = 'xx-small';
  }
}

//display a person as not wanting a shift.  Currently, not wanting
//means "can't do"
function is_unwanted_person(member,styleflag) {
  cant_do_person(member,styleflag);
}

//displays as wanting a shift -- just means bold right now.
function is_wanted_person(member,styleflag) {
  var st;
  if (arguments.length > 1) {
    st = member;
  }
  else {
    st = get_style(member);
  }
  if (st) {
    st.fontWeight = 'bold';
  }
}

//call the above functions and set the size and the color.  This
//size overrides the cant_do_person above, but a later call to
//cant_do_person will override this size, as happens below
function set_rating_person(member,workshift) {
  var rating = get_rating(member,workshift);
  var st = get_style(member);
  if (typeof(rating_color[rating]) == "undefined") {
    rating = rating_color.length-1;
  }
  //the houselist in people is used for sorting by various criteria
  //including the ratings people have given to the currently-selected
  //shift.  That rating is stored in the 3rd coordinate.
  self.people.houselist[listhouse[member]][3] = rating;
  if (rating == 0) {
    is_unwanted_person(st,true);
  }
  else if (rating >= min_wanted_rating) {
    is_wanted_person(st,true);
  }
  st.color = '#' + rating_color[rating];
  //the size is at least 85%, and at most 85+15(max/min_wanted)%
  var temp = (Number(85)+Number(15)*(rating/min_wanted_rating));
  st.fontSize = temp + '%';
}

//calculate rating by a member of a workshift.  Needs to look through
//member preferences and see if any match this shift
function get_rating(member,workshift) {
  pref = self.master_shifts.find_match(self.master_shifts.wantedlist[member],workshift);
  if (pref) {
    return pref[1];
  }
  //no match, return default
  return <?=$default_rating?>;
}
//change the text of the member element to show how many hours they
//have currently
function display_hours(member,hours,changehours) {
  if (get_person(member)) {
    get_person(member).innerHTML = member + " " + Number(hours);
    //people can sort on hours too, stored in 5th coordinate
    self.people.houselist[listhouse[member]][5] = hours;
  }
<?php
    //hack here so that when CO is using this, we also update the
    //hours assigned to each house
    if ($url_name == 'co') {
      //were there any hours actually changed?
?>
 if (changehours) {
   //house is last three characters of member's name
   var pot_house = member.substr(-3);
   for (var ii in houses_array) {
     //are we at the house?
     if (pot_house == houses_array[ii]) {
       //set the text of that element to the appropriate
       people.document.getElementById('span' + pot_house).innerHTML = 
         pot_house + ': ' + (houses_hours[pot_house]+=Number(changehours));
     }
   }
 }
<?php
}
?>
    }
          
//when we blur out of a shift's box, we reset all styles
function reset_list() {
  for (var mem in listhouse) {
    var elt = get_style(mem);
    elt.display = '';
    elt.color = '';
    elt.fontWeight = '';
    elt.textDecoration = '';
    elt.fontSize = '';
    self.people.houselist[listhouse[mem]][3] = 0;
  }
  //sort list, and tell function that all that's changed is ratings
  self.people.sort_list(1);
}

//when the user clicks into a specific workshift, show the member who
//currently has the workshift in blue, and change members' appearance
//based on how good this shift is for them
function offer_options(member,hours,workshift) {
  reset_list();
  //workshift['day'] gives the day the workshift is done.  If it is less
  //than 0, it means that we haven't clicked into a specific day, but
  //rather are just somewhere on the row, so there is no one person
  //who has the shift.
  if (workshift['day'] >= 0) {
    if (get_style(member)) {
      get_style(member).color = 'blue';
    }
  }
  for (var mem in listhouse) {
    if (workshift['day'] >= 0 && mem == member) {
      continue;
    }
    //remember, set_rating_person will change the members' displays
    set_rating_person(mem,workshift);
    //if the member actually can't do this particular shift, be more
    //discouraging about it. Test as if it's a weeklong if no day
    if (workshift['day'] < 0) {
      workshift['day'] = 0;
    }
    if (!self.master_shifts.can_do(mem,workshift,true)) {
      cant_do_person(mem);
    }
  }
  //sort list, and tell function that all that's changed is ratings
  people.sort_list(1);
}

<?php
//we need a houses_array, and a houses_hours array when we're co since we need
//to keep track of how many hours each house has been assigned.
if ($url_name == 'co') {
?>
var houses_array = [<?=js_array(explode(',',
                                        get_static('houses_array',
                                                   'aca,ath,caz,clo,con,dav,' .
                                                   'euc,fen,hip,hoy,kid,kng,' .
                                                   'lot,nsc,rid,roc,she,stb,' .
                                                   'wil,wol')))?>];

var houses_hours = new Array();

 function zero_house_hours() {
   for (var house_index in houses_array) {
     houses_hours[houses_array[house_index]] = 0;
   }
 }
 zero_house_hours();

<?php
    }
//we need to pass the archive below -- it's pretty rare that we ever
//have to refer to it, but we do here because of the frames.
?>

</script>

</HEAD>
<FRAMESET cols="178px, *">
<FRAME src="people.php<?=$archive?'?archive=' . 
escape_html($archive):''?>" name='people'>
<FRAME src="master_shifts.php<?=$archive?'?archive=' . 
escape_html($archive):''?>" name='master_shifts'>
</FRAMESET>
<NOFRAMES>
<?=$body_insert?>
<P>Get a browser with frames -- sorry!  Or go directly to
<a href="master_shifts.php<?=$archive?'?archive=' . 
escape_html($archive):''?>">master_shifts.php</a> -- you won't get the sidebar,
but it's better than nothing.</p>
</HTML>
